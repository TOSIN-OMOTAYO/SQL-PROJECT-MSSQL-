This is a SQL project, analyzing the Chinook Digital Music Store by answering some business questions to optimize their business opportunities.
Data is from the Github repository- https://github.com/lerocha/chinook-database
Download files: https://github.com/lerocha/chinook-database/tree/master/ChinookDatabase/DataSources



1) Find the artist who has contributed the maximum no of songs. Display the artist’s name and the no of albums.
    with temp as
    	(select alb.artistid
    	, count(1) as no_of_albums
    	, rank() over(order by count(1) desc) as rnk
    	from Album alb
    	group by alb.artistid)
    select art.name as artist_name, t.no_of_albums
    from temp t
    join artist art on art.artistid = t.artistid
    where rnk = 1;

2) Display the name, email id, and country of all listeners who love Jazz, Rock, and Pop music.
    select  (c.firstname||' '||c.lastname) as customer_name
    , c.email, c.country, g.name as genre
    from InvoiceLine il
    join track t on t.trackid = il.trackid
    join genre g on g.genreid = t.genreid
    join Invoice i on i.invoiceid = il.invoiceid
    join customer c on c.customerid = i.customerid
    where g.name in ('Jazz', 'Rock', 'Pop');

3) Identify all the albums that have less than 5 tracks under them.
    Display the album name, artist name, and the no of tracks in the respective album.
        Solution 1:
        with temp as
        	(select t.albumid, count(1) as no_of_tracks
        	from Track t
        	group by t.albumid
        	having count(1) < 5
        	order by 2 desc)
        select al.title as album_title, art.name as artist_name, t.no_of_tracks
        from temp t
        join album al on t.albumid = al.albumid
        join artist art on art.artistid = al.artistid
        order by t.no_of_tracks desc;

        Solution 2:
        select al.title as album_name, art.name as artist_name, count(1) as no_of_tracks
        from album al
        join track t on t.albumid = al.albumid
        join artist art on art.artistid = al.artistid
        group by al.title, art.name
        having count(1) < 5

4) Which is the most popular and least popular genre?
    Popularity is defined based on how many times it has been purchased.
    select distinct
      first_value(g.name) over (order by count(1) desc) as most_popular
    , last_value(g.name) over (order by count(1) desc range between unbounded preceding and unbounded following ) as most_popular
    from InvoiceLine il
    join track t on t.trackid = il.trackid
    join genre g on g.genreid = t.genreid
    group by g.name
    order by 2 desc
5) Find the employee who has supported the most no of customers. Display the employee name and designation
    select employee_name, title as designation
    from (
    	select (e.firstname||' '||e.lastname) as employee_name, e.title
    	, count(1) as no_of_customers
    	, rank() over(order by count(1) desc) as rnk
    	from Customer c
    	join employee e on e.employeeid=c.supportrepid
    	group by e.firstname,e.lastname, e.title) x
    where x.rnk=1;

6) Which city corresponds to the best customers?
    with temp as
    	(select city, sum(total) total_purchase_amt
    	, rank() over(order by sum(total) desc) as rnk
    	from Invoice i
    	join Customer c on c.Customerid = i.Customerid
    	group by city)
    select city
    from temp
    where rnk=1;

7) The highest number of invoices belongs to which country?
    select country
    from (
    	select billingcountry as country, count(1) as no_of_invoice
    	, rank() over(order by count(1) desc) as rnk
    	from Invoice
    	group by billingcountry) x
    where x.rnk=1;

8) Name the best customer (customer who spent the most money).
    select (c.firstname||' '||c.lastname) as customer_name
    from (
    	select customerid, sum(total) total_purchase
    	, rank() over(order by sum(total) desc) as rnk
    	from Invoice
    	group by customerid) x
    join customer c on c.customerid = x.customerid
    where rnk=1;

9) Suppose you want to host a rock concert in a city and want to know which location should host it.
    Query the dataset to find the city with the most rock-music listeners to answer this question.
    select I.billingcity, count(1)
    from Track T
    join Genre G on G.genreid = T.genreid
    join InvoiceLine IL on IL.trackid = T.trackid
    join Invoice I on I.invoiceid = IL.invoiceid
    where G.name = 'Rock'
    group by I.billingcity
    order by 2 desc;

10) Display the track, album, artist, and genre for all tracks which are not purchased.
    select t.name as track_name, al.title as album_title, art.name as artist_name, g.name as genre
    from Track t
    join album al on al.albumid=t.albumid
    join artist art on art.artistid = al.artistid
    join genre g on g.genreid = t.genreid
    where not exists (select 1
    				 from InvoiceLine il
    				 where il.trackid = t.trackid); -- 1519

11) Find artists who have performed in multiple genres. Display the artist’s name and the genre.
    with temp as
    		(select distinct art.name as artist_name, g.name as genre
    		from Track t
    		join album al on al.albumid=t.albumid
    		join artist art on art.artistid = al.artistid
    		join genre g on g.genreid = t.genreid
    		order by 1,2),
    	final_artist as
    		(select artist_name
    		from temp t
    		group by artist_name
    		having count(1) > 1)
    select t.*
    from temp t
    join final_artist fa on fa.artist_name = t.artist_name
    order by 1,2;

12) Which is the most popular and least popular genre?
    Popularity is defined based on how many times it has been purchased.
    
with temp as
    		(select distinct g.name
    		, count(1) as no_of_purchases
    		, rank() over(order by count(1) desc) as rnk
    		from InvoiceLine il
    		join track t on t.trackid = il.trackid
    		join genre g on g.genreid = t.genreid
    		group by g.name
    		order by 2 desc),
    	temp2 as
    		(select max(rnk) as max_rnk from temp)
    select name as genre
    , case when rnk = 1 then 'Most Popular' else 'Least Popular' end as popular
    from temp
    cross join temp2
    where rnk = 1 or rnk = max_rnk;

    -- Solution using INNER join
    with temp as
    		(select g.name as genre, count(1) as no_of_songs
    		, rank() over(order by count(1) desc) as rnk
    		from InvoiceLine il
    		join track t on t.trackid = il.trackid
    		join genre g on g.genreid = t.genreid
    		group by g.name
    		order by 2 desc),
    	max_rank as
    		(select max(rnk) as max_rnk from temp)
    select genre, no_of_songs
    , case when rnk = 1 then 'Most Popular' else 'Least Popular' end as Popular_Flag
    from temp
    inner join max_rank on rnk = max_rnk or rnk = 1;

12) Identify if there are tracks more expensive than others. If there are then
    display the track name along with the album title and artist name for these expensive tracks.
    select t.name as track_name, al.title as album_name, art.name as artist_name
    from Track t
    join album al on al.albumid = t.albumid
    join artist art on art.artistid = al.artistid
    where unitprice > (select min(unitprice) from Track)

13) Identify the 5 most popular artists for the most popular genre.
    Popularity is defined based on how many songs an artist has performed in the particular genre.
    Display the artist’s name along with the no of songs.
    [Reason: Now that we know that our customers love rock music, we can decide which musicians to invite to play at the concert.
    Let’s invite the artists who have written the most rock music in our dataset.]

    with most_popular_genre as
    		(select name as genre
    		from (select g.name
    			, count(1) as no_of_purchases
    			, rank() over(order by count(1) desc) as rnk
    			from InvoiceLine il
    			join track t on t.trackid = il.trackid
    			join genre g on g.genreid = t.genreid
    			group by g.name
    			order by 2 desc) x
    		where rnk = 1),
    	all_data as
    		(select art.name as artist_name, count(1) as no_of_songs
    		, rank() over(order by count(1) desc) as rnk
    		from track t
    		join album al on al.albumid = t.albumid
    		join artist art on art.artistid = al.artistid
    		join genre g on g.genreid = t.genreid
    		where g.name in (select genre from most_popular_genre)
    		group by art.name
    		order by 2 desc)
    select artist_name, no_of_songs
    from all_data
    where rnk <= 5;





